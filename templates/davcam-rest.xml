<templateSet group="davcam-rest">
  <template name="davcam-rest-controller" value="import io.swagger.annotations.ApiImplicitParam;&#10;import io.swagger.annotations.ApiImplicitParams;&#10;import io.swagger.annotations.ApiResponse;&#10;import io.swagger.annotations.ApiResponses;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpEntity;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import static javax.servlet.http.HttpServletResponse.*;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/$camelcase$&quot;)&#10;public class $name$Controller {&#10;    @Autowired&#10;    private $name$Service $camelcase$Service;&#10;&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({@ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = SC_OK, message = &quot;$name$ read successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = SC_BAD_REQUEST, message = &quot;Invalid input parameters&quot;),&#10;    })&#10;    public HttpEntity&lt;List&lt;$name$Response&gt;&gt; findAll() {&#10;        return new ResponseEntity&lt;&gt;($camelcase$Service.findAll(), HttpStatus.OK);&#10;    }&#10;&#10;    @PostMapping()&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = SC_OK, message = &quot;$name$ created successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    public HttpEntity&lt;$name$Response&gt; create$name$(@ModelAttribute $name$Request $camelcase$Request) {&#10;        return new ResponseEntity&lt;&gt;($camelcase$Service.create$name$($camelcase$Request), HttpStatus.OK);&#10;    }&#10;&#10;    @PutMapping(&quot;{$camelcase$Id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = SC_OK, message = &quot;$name$ updated successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    HttpEntity&lt;$name$Response&gt; update$name$(@PathVariable Long $camelcase$Id, @ModelAttribute $name$Request $camelcase$Request) {&#10;        return new ResponseEntity&lt;&gt;($camelcase$Service.update$name$($camelcase$Id, $camelcase$Request), HttpStatus.OK);&#10;    }&#10;&#10;    @DeleteMapping(&quot;{$camelcase$Id}&quot;)&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = SC_OK, message = &quot;$name$ deleted successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    public HttpEntity&lt;Void&gt; delete$name$(@PathVariable Long $camelcase$Id) {&#10;        $camelcase$Service.delete$name$($camelcase$Id);&#10;        return new ResponseEntity&lt;&gt;(null, HttpStatus.OK);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="camelcase" expression="camelCase(name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="davcam-rest-service" value="import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;public interface $name$Service {&#10;&#10;    List&lt;$name$Response&gt; findAll();&#10;&#10;    $name$Response create$name$(@Valid $name$Request $camelCase$Request);&#10;&#10;    $name$Response update$name$(Long $camelCase$Id, @Valid $name$Request $camelCase$Request);&#10;&#10;    void delete$name$(Long id);&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="camelCase" expression="camelCase(name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="davcam-rest-service-impl" value="@org.springframework.stereotype.Service&#10;@org.springframework.validation.annotation.Validated&#10;public class $name$ServiceImpl implements $name$Service {&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private $name$Helper $camelCaseName$Helper;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private AccountHelper accountHelper;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private $name$JpaRepository $camelCaseName$JpaRepository;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private AccountJpaRepository accountJpaRepository;&#10;&#10;    @java.lang.Override&#10;    public java.util.List&lt;$name$Response&gt; findAll() {&#10;        return $camelCaseName$JpaRepository.findAll()&#10;                .stream().map($camelCaseName$Helper::mapEntityToResponse)&#10;                .toList();&#10;    }&#10;&#10;    @java.lang.Override&#10;    @org.springframework.transaction.annotation.Transactional&#10;    public $name$Response create$name$($name$Request $camelCaseName$Request) {&#10;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public $name$Response update$name$(java.lang.Long $camelCaseName$Id, $name$Request $camelCaseName$Request) {&#10;        &#10;    }&#10;&#10;    @java.lang.Override&#10;    public void delete$name$(java.lang.Long id) {&#10;        $name$Entity $camelCaseName$Entity = $camelCaseName$Helper.findById(id);&#10;        $camelCaseName$JpaRepository.delete($camelCaseName$Entity);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="camelCaseName" expression="camelCase(name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="davcam-rest-helper" value="import davcam.common.exception.ResourceNotFoundException;&#10;import davcam.common.helper.Helper;&#10;import it.mansolution.rest.modules.account.helper.AccountHelper;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Component;&#10;&#10;@org.springframework.stereotype.Component&#10;public class $name$Helper implements davcam.common.helper.HelperWithFind&lt;$name$Entity, $name$Request, $name$Response&gt; {&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private $name$JpaRepository $camelcase$JpaRepository;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private it.mansolution.rest.modules.account.helper.AccountHelper accountHelper;&#10;&#10;    @java.lang.Override&#10;    public $name$Response mapEntityToResponse($name$Entity $camelcase$Entity, $name$Response $camelcase$Response) {&#10;&#10;        return $camelcase$Response;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public $name$Response mapEntityToResponse($name$Entity $camelcase$Entity) {&#10;        return mapEntityToResponse($camelcase$Entity, new $name$Response());&#10;    }&#10;&#10;    @java.lang.Override&#10;    public $name$Entity mapRequestToEntity($name$Request $camelcase$Request, $name$Entity $camelcase$Entity) {&#10;&#10;        return $camelcase$Entity;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public $name$Entity mapRequestToEntity($name$Request $camelcase$Request) {&#10;        return mapRequestToEntity($camelcase$Request, new $name$Entity());&#10;    }&#10;&#10;    public $name$Entity findById(java.lang.Long id) {&#10;        $name$Entity $camelcase$Entity = $camelcase$JpaRepository.findById(id)&#10;                .orElseThrow(() -&gt; new davcam.common.exception.ResourceNotFoundException($name$Entity.class, id));&#10;        return $camelcase$Entity;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="camelcase" expression="camelCase(name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>