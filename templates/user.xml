<templateSet group="user">
  <template name="&lt;abbreviation&gt;" value="package it.mansolution.rest.modules.mansol.mansolCustomer;&#10;&#10;import ApiImplicitParam;&#10;import ApiImplicitParams;&#10;import ApiResponse;&#10;import ApiResponses;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import HttpEntity;&#10;import HttpStatus;&#10;import ResponseEntity;&#10;&#10;import HttpServletResponse;&#10;import List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/$path$&quot;)&#10;public class $name$Controller {&#10;    @Autowired&#10;    private $name$Service $name$Service;&#10;&#10;    @GetMapping&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({@ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = HttpServletResponse.SC_OK, message = &quot;$name$ read successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = HttpServletResponse.SC_BAD_REQUEST, message = &quot;Invalid input parameters&quot;),&#10;    })&#10;    public HttpEntity&lt;List&lt;$name$Response&gt;&gt; findAll() {&#10;        return new ResponseEntity&lt;&gt;(mansolCustomerService.findAll(), HttpStatus.OK);&#10;    }&#10;&#10;    @PostMapping()&#10;    @PreAuthorize(&quot;hasRole('USER')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = HttpServletResponse.SC_OK, message = &quot;Customer created successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = HttpServletResponse.SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    public HttpEntity&lt;$name$Response&gt; createCustomer(@ModelAttribute MansolCustomerRequest mansolCustomerRequest) {&#10;        return new ResponseEntity&lt;&gt;(mansolCustomerService.createCustomer(mansolCustomerRequest), HttpStatus.OK);&#10;    }&#10;&#10;    @PutMapping(&quot;{customerId}&quot;)&#10;//    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = HttpServletResponse.SC_OK, message = &quot;Customer updated successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = HttpServletResponse.SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    HttpEntity&lt;$name$Response&gt; updateCustomer(@PathVariable java.lang.Long customerId, @ModelAttribute MansolCustomerRequest mansolCustomerRequest) {&#10;        return new ResponseEntity&lt;&gt;(mansolCustomerService.updateCustomer(customerId, mansolCustomerRequest), HttpStatus.OK);&#10;    }&#10;&#10;    @DeleteMapping(&quot;{customerId}&quot;)&#10;//    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    @ApiImplicitParams({&#10;            @ApiImplicitParam(name = &quot;Authorization&quot;, dataType = &quot;string&quot;, paramType = &quot;header&quot;, value = &quot;Authorization token&quot;)})&#10;    @ApiResponses({&#10;            @ApiResponse(code = HttpServletResponse.SC_OK, message = &quot;Customer updated successfully&quot;, response = $name$Response.class),&#10;            @ApiResponse(code = HttpServletResponse.SC_UNAUTHORIZED, message = &quot;Not authorized&quot;),&#10;            @ApiResponse(code = HttpServletResponse.SC_NOT_FOUND, message = &quot;Not found&quot;),&#10;    })&#10;    public HttpEntity&lt;java.lang.Void&gt; updateCustomer(@PathVariable java.lang.Long customerId) {&#10;        mansolCustomerService.deleteCustomer(customerId);&#10;        return new ResponseEntity&lt;&gt;(null, HttpStatus.OK);&#10;    }&#10;}" toReformat="true" toShortenFQNames="true">
    <variable name="path" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>